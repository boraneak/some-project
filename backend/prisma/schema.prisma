generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator-markdown"
  output   = "./ERD.md"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int        @id @default(autoincrement())
  displayName  String
  imageUrl     String
  password     String
  email        String     @unique
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  activities   Activity[]
  boards       Board[]    @relation("Owner")
  cards        Card[]     @relation("Assignees")
  boardMembers Board[]    @relation("Members")
}

model Board {
  id         Int        @id @default(autoincrement())
  name       String
  background String
  ownerId    Int
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  activities Activity[]
  owner      User       @relation("Owner", fields: [ownerId], references: [id], onDelete: Cascade)
  cards      Card[]
  lists      List[]
  members    User[]     @relation("Members")
}

model List {
  id        Int      @id @default(autoincrement())
  name      String
  order     Int      @default(0)
  archived  Boolean  @default(false)
  boardId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cards     Card[]
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
}

model Card {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  order       Int      @default(0)
  archived    Boolean  @default(false)
  listId      Int
  boardId     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  board       Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  list        List     @relation(fields: [listId], references: [id])
  assignees   User[]   @relation("Assignees")
}

model Activity {
  id        Int      @id @default(autoincrement())
  text      String
  userId    Int
  boardId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
